version: '3'

services:
  bot:
    image: bot_image
    build:
      context: 'bot'
      dockerfile: Dockerfile
    restart: always
    environment:
      TOKEN: ${TOKEN}
      RM_HOST: ${RM_HOST}
      RM_PORT: ${RM_PORT}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    depends_on:
      - db
    volumes:
      - db_logs:/app/logs
  db:
    image: db_image
    build:
      context: 'db'
      dockerfile: Dockerfile
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
        postgres
          -c wal_level=replica
          -c hot_standby=on
          -c max_wal_senders=10
          -c max_replication_slots=10
          -c hot_standby_feedback=on
          -c log_replication_commands=on
          -c log_directory='/var/log/postgresql'
          -c log_filename='postgresql.log'
          -c logging_collector=on
    volumes:
      - ./db_files:/var/lib/postgresql/data
      - db_logs:/var/log/postgresql

  db_repl:
    image: db_repl_image
    build:
      context: 'db_repl'
      dockerfile: Dockerfile
    environment:
      POSTGRES_PASSWORD: ${DB_REPL_PASSWORD}
      POSTGRES_USER: ${DB_REPL_USER}
      POSTGRES_HOST: ${DB_REPL_HOST}
      POSTGRES_PORT: ${DB_REPL_PORT}
    command: |
      bash -c "
        rm -rf /var/lib/postgresql/data/*
        export PGPASSWORD="${DB_PASSWORD}"
        until pg_basebackup -R --pgdata=/var/lib/postgresql/data --slot=replication_slot --host=db --username=${DB_REPL_USER} --port=5432
        do
          echo 'Waiting for primary to connect...'
          sleep 1s
        done;
        echo 'Backup done, starting replica...'
        chown -R ${DB_USER}:${DB_USER} /var/lib/postgresql/data
        chmod 0700 /var/lib/postgresql/data
        su - postgres -c '/usr/lib/postgresql/15/bin/postgres -D /var/lib/postgresql/data'
      "
    depends_on:
      - db
    volumes:
      - ./repl_db_files:/var/lib/postgresql/data

#networks:
#  custom_network:
#    driver: bridge
#    ipam:
#      config:
#        - subnet: 172.20.0.0/16
volumes:
  db_logs:
